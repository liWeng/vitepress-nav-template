import{_ as e,o as a,c as r,a as s}from"./app.4690b2e6.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"什么是docker","slug":"什么是docker","link":"#什么是docker","children":[{"level":3,"title":"Docker 常用命令","slug":"docker-常用命令","link":"#docker-常用命令","children":[]}]}],"relativePath":"articles/deploy/中间件-tomcat镜像使用.md","lastUpdated":1697709769000}'),d={name:"articles/deploy/中间件-tomcat镜像使用.md"},n=s(`<h2 id="什么是docker" tabindex="-1">什么是docker <a class="header-anchor" href="#什么是docker" aria-hidden="true">#</a></h2><p>docker 是基于go语言实现的云开源项目，诞生于2013年初。docker 引擎的基础是linux 容器技术（lxc），在lxc 的基础上docker 进一步优化了容器的使用体验。docker 提供了各种容器管理工具（如分发，版本，移植等）让用户无需关注底层操作系统，就像操作一个轻量级的虚拟机一样。可以简单的将docker 理解为一种沙盒，每个容器内运行一个应用，不同容器相互隔离，容器的创建，运行，停止都非常快速，而且自身对资源的需求也十分有限远低于虚拟机。</p><h4 id="具体来说docker-在开发和运维的过程中有如下几个方面的优势" tabindex="-1">具体来说docker 在开发和运维的过程中有如下几个方面的优势 <a class="header-anchor" href="#具体来说docker-在开发和运维的过程中有如下几个方面的优势" aria-hidden="true">#</a></h4><ul><li><p>更快速的交付和部署</p><p>使用docker，开发人员可以使用镜像快速构建一套标准的开发环境； 开发完成之后测试运维人员可以直接使用相同环境来部署代码，docker可以快速创建和删除容器，实现快速迭代，大量节约开发，测试，部署的时间。</p></li><li><p>更高效的资源利用</p><p>docker 运行不需要额外的虚拟化管理程序，他是内核级的虚拟化，可以实现更高的性能，同时对资源的额外需求很低。</p></li><li><p>更轻松的迁移和扩展</p><p>docker 容器几乎可以在任何平台上运行。包括物理机，虚拟机，公有云，私有云，个人电脑，服务器等，这样可以在不通平台之间任意迁移。</p></li><li><p>更简单的更新和管理</p><p>使用Dockerfile，可以代替以往的繁琐的更新，而且这些更新是可跟踪的，在开发环境中这种形式更为可靠。</p></li></ul><h4 id="docker-的核心概念" tabindex="-1">docker 的核心概念 <a class="header-anchor" href="#docker-的核心概念" aria-hidden="true">#</a></h4><ul><li><p>镜像 (Image)</p><p>镜像类似于虚拟机镜像，可以将它理解为一个面向Docker引擎的只读模板，包含了文件系统，如一个包含了Centos 文件系统的镜像就可以称为centos镜像。 后期制作的镜像必须是基于基本文件系统镜像制作的，比如在centos 镜像中加入 java 环境， 加入tomcat 配置好环境变量，然后重新生成一个新的镜像。用户可以从网上下载已经做好的镜像直接导入使用，</p></li><li><p>容器 (Container)</p><p>容器是从镜像创建的应用的运行实例，可以使用镜像创建多个容器并运行，这些容器都是相互隔离，互不可见的。可以把容器理解为一个简单的linux 系统，包括root用户权限，进程空间，用户空间，网络空间等。可以进入到容器里边，就像进入一个linux 系统一样。 镜像本身是只读的，每个容器在启动的时候 Docker会在镜像的嘴上层创建一个可写的层，镜像本身保持不变。</p></li><li><p>仓库 (Repository)</p><p>Docker 仓库类似于代码仓库（git），只不过存储的不是代码是docker 的镜像。 是集中存放镜像文件的场所。根据仓库存储的镜像是否共享，分为私有仓库和。 （类似于互联网的 git 公有仓库，和公司内部搭建的git私有仓库），目前最大的Docker 公有仓库是Docker Hub，存放了数量庞大的镜像。 目前阿里云等云厂商也都提供共用镜像使用。</p><p>docker 仓库的命令跟git 基本一致</p><p>使用 docker pull &lt;docker镜像地址&gt; 命令可以 可以下载一个镜像到本地</p><p>修改完后 ，比如加入 tomcat ，可以使用 docker commit 提交镜像到仓库</p><p>使用 docker push 命令可以提交一个新的 镜像到仓库</p></li></ul><h4 id="centos-安装docker" tabindex="-1">centos 安装docker <a class="header-anchor" href="#centos-安装docker" aria-hidden="true">#</a></h4><h4 id="_6-5" tabindex="-1">6.5 <a class="header-anchor" href="#_6-5" aria-hidden="true">#</a></h4><p>首先查看内核是否 3.8 以上，如果不是需要升级内核</p><pre><code>http://www.xiaohuai.com/4164
</code></pre><p>内核满足后安装</p><h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h1><pre><code>sudo yum install -y http://mirrors.yun-idc.com/epel/6/i386/epel-release-6-8.noarch.rpm
</code></pre><h1 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-hidden="true">#</a></h1><pre><code>sudo yum install -y docker-io
</code></pre><h4 id="_7-0" tabindex="-1">7.0 <a class="header-anchor" href="#_7-0" aria-hidden="true">#</a></h4><p>由于7.0 源中内置docker，可以直接使用yum 安装</p><pre><code>sudo yum install -y docker
</code></pre><p>目前更新docker 有两种方式，一种是源码编译安装，另一种是下载二进制文件更新。</p><h4 id="安装完成后启动" tabindex="-1">安装完成后启动 <a class="header-anchor" href="#安装完成后启动" aria-hidden="true">#</a></h4><pre><code>service docker start
</code></pre><p>Daemon模式。查看是否有错误</p><pre><code>docker -d 
</code></pre><p>如果有</p><pre><code>elocation error: docker: symbol dm_task_get_info_with_deferred_remove, 
version Base not defined in file libdevmapper.so.1.02 with link time reference
</code></pre><p>则执行</p><pre><code> yum upgrade device-mapper-libs
</code></pre><h1 id="-2" tabindex="-1"><a class="header-anchor" href="#-2" aria-hidden="true">#</a></h1><pre><code> service docker stop 
</code></pre><h1 id="-3" tabindex="-1"><a class="header-anchor" href="#-3" aria-hidden="true">#</a></h1><pre><code> service docker start
</code></pre><h4 id="下载一个centos镜像-latest-为最新版本。也可以指定-xxx-版本" tabindex="-1">下载一个centos镜像,:latest 为最新版本。也可以指定：XXX 版本 <a class="header-anchor" href="#下载一个centos镜像-latest-为最新版本。也可以指定-xxx-版本" aria-hidden="true">#</a></h4><pre><code>docker pull centos:latest
</code></pre><p>会自动从docker hub 中下载 大概为 190M</p><h4 id="下载后执行查看所有镜像" tabindex="-1">下载后执行查看所有镜像 <a class="header-anchor" href="#下载后执行查看所有镜像" aria-hidden="true">#</a></h4><pre><code>docker images 
</code></pre><h4 id="基于centos镜像创建容器" tabindex="-1">基于centos镜像创建容器 <a class="header-anchor" href="#基于centos镜像创建容器" aria-hidden="true">#</a></h4><p>docker create -it centos:latest</p><h4 id="查看所有容器" tabindex="-1">查看所有容器 <a class="header-anchor" href="#查看所有容器" aria-hidden="true">#</a></h4><pre><code>docker ps -a
</code></pre><h4 id="启动这个容器" tabindex="-1">启动这个容器 <a class="header-anchor" href="#启动这个容器" aria-hidden="true">#</a></h4><pre><code>docker start &lt;容器的id&gt; /bin/echo &#39;hello world&#39;
</code></pre><h1 id="-4" tabindex="-1"><a class="header-anchor" href="#-4" aria-hidden="true">#</a></h1><p>可以看到屏幕打印了 hello world</p><p>执行完后该容器就终止了</p><h4 id="下面命令将启动一个bash-终端-允许用户进行交互" tabindex="-1">下面命令将启动一个bash 终端 允许用户进行交互 <a class="header-anchor" href="#下面命令将启动一个bash-终端-允许用户进行交互" aria-hidden="true">#</a></h4><pre><code>docker start &lt;容器id&gt; -t -i /bin/bash
</code></pre><p>用户可以通过命令进行交互，如 pwd，ls 等，在容器内查看进程 ps， 可以看到只运行了 bash 应用，并没有其他不需要的进程。， 可以输入exit 退出容器</p><h4 id="如果需要容器以后台守护态运行" tabindex="-1">如果需要容器以后台守护态运行 <a class="header-anchor" href="#如果需要容器以后台守护态运行" aria-hidden="true">#</a></h4><pre><code>运行时加 -d 就可以了
</code></pre><h3 id="docker-常用命令" tabindex="-1">Docker 常用命令 <a class="header-anchor" href="#docker-常用命令" aria-hidden="true">#</a></h3><h5 id="查看信息" tabindex="-1">查看信息 <a class="header-anchor" href="#查看信息" aria-hidden="true">#</a></h5><pre><code>docker info
</code></pre><h5 id="查看镜像" tabindex="-1">查看镜像 <a class="header-anchor" href="#查看镜像" aria-hidden="true">#</a></h5><pre><code>docker images
</code></pre><h5 id="查看容器" tabindex="-1">查看容器 <a class="header-anchor" href="#查看容器" aria-hidden="true">#</a></h5><pre><code>docker ps
</code></pre><h5 id="查看所有容器-1" tabindex="-1">查看所有容器 <a class="header-anchor" href="#查看所有容器-1" aria-hidden="true">#</a></h5><pre><code>docker ps -a
</code></pre><h5 id="存出镜像文件" tabindex="-1">存出镜像文件 <a class="header-anchor" href="#存出镜像文件" aria-hidden="true">#</a></h5><pre><code>docker save -o aaaa.tar centos:14.0
</code></pre><h5 id="加载镜像文件" tabindex="-1">加载镜像文件 <a class="header-anchor" href="#加载镜像文件" aria-hidden="true">#</a></h5><pre><code>docker load &lt; centos.tar
</code></pre><h5 id="下载镜像" tabindex="-1">下载镜像 <a class="header-anchor" href="#下载镜像" aria-hidden="true">#</a></h5><pre><code>docker pull centos/[或镜像地址]，默认为docker hub
</code></pre><h5 id="查看镜像信息" tabindex="-1">查看镜像信息 <a class="header-anchor" href="#查看镜像信息" aria-hidden="true">#</a></h5><pre><code>docker inspect &lt;镜像ID&gt;
</code></pre><h5 id="创建容器" tabindex="-1">创建容器 <a class="header-anchor" href="#创建容器" aria-hidden="true">#</a></h5><pre><code>docker create &lt;镜像ID、或名称&gt;
</code></pre><h5 id="删除容器" tabindex="-1">删除容器 <a class="header-anchor" href="#删除容器" aria-hidden="true">#</a></h5><pre><code>docker rm
</code></pre><h1 id="-5" tabindex="-1"><a class="header-anchor" href="#-5" aria-hidden="true">#</a></h1><pre><code>docker rm -f 强行停止并删除
</code></pre><h5 id="创建容器并运行" tabindex="-1">创建容器并运行 <a class="header-anchor" href="#创建容器并运行" aria-hidden="true">#</a></h5><pre><code>docker run &lt;镜像ID、或名称&gt;
</code></pre><h5 id="获取容器的logs" tabindex="-1">获取容器的logs <a class="header-anchor" href="#获取容器的logs" aria-hidden="true">#</a></h5><pre><code>docker logs -f
</code></pre><h5 id="进入容器" tabindex="-1">进入容器 <a class="header-anchor" href="#进入容器" aria-hidden="true">#</a></h5><pre><code>docker exec -it &lt;容器ID&gt; /bin/bash 
</code></pre><h5 id="停止容器" tabindex="-1">停止容器 <a class="header-anchor" href="#停止容器" aria-hidden="true">#</a></h5><pre><code>docker stop [-t|--time[=10]] 会先发发送给容器SIGTERM信号，然后一段时间后（默认为10s）终止容器】
</code></pre><h1 id="-6" tabindex="-1"><a class="header-anchor" href="#-6" aria-hidden="true">#</a></h1><pre><code>docker stop &lt;容器id&gt;
</code></pre><h1 id="-7" tabindex="-1"><a class="header-anchor" href="#-7" aria-hidden="true">#</a></h1><pre><code>通过exit 退出终端时容器立刻终止
</code></pre><h5 id="运行容器" tabindex="-1">运行容器 <a class="header-anchor" href="#运行容器" aria-hidden="true">#</a></h5><pre><code>docker start &lt;容器id&gt;
</code></pre><h5 id="配置加速器" tabindex="-1">配置加速器 <a class="header-anchor" href="#配置加速器" aria-hidden="true">#</a></h5><h6 id="_7-0-1" tabindex="-1">7.0 <a class="header-anchor" href="#_7-0-1" aria-hidden="true">#</a></h6><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">   sudo sed -i &#39;s|other_args=&quot;|other_args=&quot;--registry-mirror=https://s856njmh.mirror.aliyuncs.com |g&#39; /etc/sysconfig/docker</span></span>
<span class="line"><span style="color:#A6ACCD;">   sudo sed -i &quot;s|OPTIONS=&#39;|OPTIONS=&#39;--registry-mirror=https://s856njmh.mirror.aliyuncs.com |g&quot; /etc/sysconfig/docker</span></span>
<span class="line"><span style="color:#A6ACCD;">   sudo sed -i &#39;N;s|\\[Service\\]\\n|\\[Service\\]\\nEnvironmentFile=-/etc/sysconfig/docker\\n|g&#39; /usr/lib/systemd/system/docker.service</span></span>
<span class="line"><span style="color:#A6ACCD;">   sudo sed -i &#39;s|fd://|fd:// $other_args |g&#39; /usr/lib/systemd/system/docker.service</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">   sudo systemctl daemon-reload</span></span>
<span class="line"><span style="color:#A6ACCD;">   sudo service docker restart</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h6 id="_6-0" tabindex="-1">6.0 <a class="header-anchor" href="#_6-0" aria-hidden="true">#</a></h6><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">   sudo sed -i &quot;s|other_args=\\&quot;|other_args=\\&quot;--registry-mirror=https://s856njmh.mirror.aliyuncs.com |g&quot; /etc/sysconfig/docker</span></span>
<span class="line"><span style="color:#A6ACCD;">   sudo sed -i &quot;s|OPTIONS=&#39;|OPTIONS=&#39;--registry-mirror=https://s856njmh.mirror.aliyuncs.com |g&quot; /etc/sysconfig/docker</span></span>
<span class="line"><span style="color:#A6ACCD;">   sudo service docker restart</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,92),c=[n];function o(i,t,h,p,l,u){return a(),r("div",null,c)}const m=e(d,[["render",o]]);export{k as __pageData,m as default};
